<template>
  <div v-if="selectedAddress" class="w3-card-4">
    <div class="w3-container w3-blue-grey">
      <h5>{{ title }}</h5>
    </div>
    <!-- Validation errors-->
    <div v-if="validationErrors.length > 0">
      <div class="w3-container w3-red">
        <ul class="w3-ul">
          <li v-for="error in validationErrors" :key="error">
            {{ error }}
          </li>
        </ul>
      </div>
      <p />
    </div>

    <div class="w3-container">
      <label>First Name</label>
      <input class="w3-input" type="text" v-model="selectedAddress.firstName" />
      <label>Last Name</label>
      <input class="w3-input" type="text" v-model="selectedAddress.lastName" />
      <label>Email</label>
      <input class="w3-input" type="text" v-model="selectedAddress.email" />
      <label>Phone</label>
      <input class="w3-input" type="text" v-model="selectedAddress.phone" />
      <p />
      <div class="w3-center">
        <div class="w3-bar">
          <button
            class="w3-button w3-ripple w3-gray"
            @click="updateAddress()"
            style="margin-right: 5px; width: 8em"
          >
            Update
          </button>
          <button
            class="w3-button w3-ripple w3-red"
            @click="deleteAddress()"
            style="margin-right: 5px; width: 8em"
          >
            Delete
          </button>
        </div>
      </div>
      <p />
    </div>
  </div>
</template>

<script>
import axios from "axios";

function validateAddress(address) {
  let result = [];
  if (address.firstName == null || address.firstName.trim() == "") {
    result.push("First name must not be empty");
  }

  if (address.lastName == null || address.lastName.trim() == "") {
    result.push("Last name must not be empty");
  }

  if (address.email == null || !validEmail(address.email)) {
    result.push("Email must be set and valid");
  }

  if (address.phone == null || !validPhone(address.phone)) {
    result.push("Phone must be set and valid like '+490913132587'");
  }

  return result;
}

function validEmail(email) {
  var re =
    /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
  return re.test(email);
}

function validPhone(phone) {
  var re = /\+\d{5,50}/;
  return re.test(phone);
}

export default {
  name: "AddressEditor",
  props: ["title", "selectedAddress"],
  data() {
    return {
      validationErrors: [],
    };
  },
  methods: {
    async deleteAddress() {
      try {
        await axios.delete(
          "http://localhost:8080/addresses/" + this.selectedAddress.id
        );
      } catch (error) {
        console.log("Can not delete address");
        console.log(error);
      }
    },
    async updateAddress() {
      try {
        this.validationErrors = validateAddress(this.selectedAddress);
        if (this.validationErrors.length > 0) {
          console.log(this.validationErrors);
          return;
        }

        let oldSelected = { ...this.selectedAddress };
        await axios.put(
          "http://localhost:8080/addresses/" + this.selectedAddress.id,
          this.selectedAddress
        );
        this.getData();
        this.activate(oldSelected);
      } catch (error) {
        console.log("Can not update address");
        console.log(error);
      }
    },
    async createAddress() {
      try {
        await axios.post("http://localhost:8080/addresses", this.newAddress);
        this.getData();
      } catch (error) {
        console.log("Can not update address");
        console.log(error);
      }
    },
    activate(address) {
      this.selectedAddress = { ...address };
    },
  },
};
</script>
